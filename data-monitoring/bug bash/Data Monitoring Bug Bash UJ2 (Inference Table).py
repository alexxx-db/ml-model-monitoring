# Databricks notebook source
# MAGIC %md 
# MAGIC 
# MAGIC # Data Monitoring Bug Bash UJ2 (Inference Table)
# MAGIC 
# MAGIC Please make a copy of this notebook before use.

# COMMAND ----------

# MAGIC %md
# MAGIC 
# MAGIC 
# MAGIC Useful links:
# MAGIC  - [Bug Bash Doc](http://go/dm/bugbash)
# MAGIC  - [API Reference](https://docs.google.com/document/d/1LIsz1k4zD888GuLfxxsuJaB-QI1_gY4sHwi9R-lj65c)
# MAGIC  - [User Guide](https://docs.google.com/document/d/1d7BUxbxKDnQfhKZ8e0w99by9JLF4gRmAvDjVxmpE0ZU/edit#heading=h.pc8x54hv4i93)

# COMMAND ----------

# Install data monitoring client library. Eventually this will be included in MLR
%pip install "https://ml-team-public-read.s3.us-west-2.amazonaws.com/wheels/data-monitoring/a4050ef7-b183-47a1-a145-e614628e3146/databricks_data_monitoring-0.1.0-py3-none-any.whl"

# COMMAND ----------

# Let's use your user name in the table name to avoid the conflict with other people.

user="jennifer"

assert user

# Table names cannot use any special characters
sanitized_user = user.split("@")[0].replace(".","_")
table_name = f"dm_bugbash.default.{sanitized_user}_inference" 

# COMMAND ----------

# MAGIC %md ##0. Prepare monitored table
# MAGIC You will need to be a **UC table OWNER** in order to create monitor. If you don't have a inference table that you can test for monitoring, 
# MAGIC Here is a pre-created inference table for airbnb price prediction against [AirBnB price listing dataset](https://www.kaggle.com/datasets/jeploretizo/san-francisco-airbnb-listings). 
# MAGIC You can copy over it by the following command: 
# MAGIC 
# MAGIC <br/>
# MAGIC 
# MAGIC ```
# MAGIC spark.sql(f"CREATE TABLE {table_name} DEEP CLONE dm_bugbash.example.airbnb_price_inference TBLPROPERTIES (delta.enableChangeDataFeed = true)")
# MAGIC ```
# MAGIC <br/>
# MAGIC 
# MAGIC **Configuration:**
# MAGIC   - model: [dm_bugbash_airbnb_pricer](https://e2-dogfood.staging.cloud.databricks.com/?o=6051921418418893#mlflow/models/dm_bugbash_airbnb_pricer)
# MAGIC   - baseline table: `dm_bugbash.example.airbnb_price_inference_baseline`  
# MAGIC   - prediction column: `prediction_col`
# MAGIC   - label column: `price`
# MAGIC   - problem type: `regression`
# MAGIC   - timestamp_col: `scoring_timestamp`,
# MAGIC   - model version column": `Model_Version`,
# MAGIC 
# MAGIC   Alternatively, you can refer to [Data-Monitoring Quickstart Notebook](https://e2-dogfood.staging.cloud.databricks.com/?o=6051921418418893#notebook/292618775432112/command/43368721962371) for a more detailed walkthrough about training a model and generating an inference table 

# COMMAND ----------

# MAGIC %md
# MAGIC 
# MAGIC ## 1. Create the monitor
# MAGIC - You can check **API Walkthrogh - Monitors** section from the [user guide](https://docs.google.com/document/d/1d7BUxbxKDnQfhKZ8e0w99by9JLF4gRmAvDjVxmpE0ZU/edit#heading=h.70vskvghxjux) for more explainations.

# COMMAND ----------

from pyspark.sql import types as T
import databricks.data_monitoring as dm
from databricks.data_monitoring.analysis import analysis_type

inference_analysis = analysis_type.InferenceLog(
  # UJ: Fill the parameters to create time sereis analysis type.
)
dm_info = dm.create_monitor(
  # UJ: Fill the parameters to create the monitor with time sereis analysis type.
)

# COMMAND ----------

# MAGIC %md
# MAGIC 
# MAGIC ## 2. Inspect the monitor
# MAGIC - You can check **Inspecting the Monitor** section from the [user guide](https://docs.google.com/document/d/1d7BUxbxKDnQfhKZ8e0w99by9JLF4gRmAvDjVxmpE0ZU/edit#heading=h.70vskvghxjux) for more explainations.

# COMMAND ----------

dm.get_monitor_info(
  # UJ: Fill the parameters to inspect the monitor by API.
)

# UJ: inspecting each artifact (e.g. output tables, dashboard) generated by the library.
# Go to model UI to view the monitor configuration

# COMMAND ----------

# MAGIC %md
# MAGIC 
# MAGIC ## 3. Update the monitor

# COMMAND ----------

dm.update_monitor(
  # UJ: Fill the right parameters to update the monitor(e.g., add a baseline for the modelâ€™s inputs and outputs, add another metric granularity, or update custom metrics)
)

dm.refresh_metrics(
 # UJ: Fill the right parameters to refresh the metrics
)

# UJ: Check the updated monitor dashboard 


# COMMAND ----------

# MAGIC %md
# MAGIC 
# MAGIC ## 4. Delete the monitor

# COMMAND ----------

dm.delete_monitor(
  # UJ: Fill the right parameters to delete the monitor.
)
